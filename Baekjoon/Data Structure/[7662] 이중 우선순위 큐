import java.util.*;
import java.io.*;

public class Coding_test {

    public static void main(String[] args) throws IOException{
//        Scanner sc=new Scanner(System.in);
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        PriorityQueue<Integer>min_q=new PriorityQueue<>();
        PriorityQueue<Integer>max_q=new PriorityQueue<>(Comparator.reverseOrder());

        int t=Integer.parseInt(br.readLine());
        for(int i=0;i<t;i++) {

            int n = Integer.parseInt(br.readLine());
            for (int j = 0; j < n; j++) {
                String str = br.readLine();
                StringTokenizer st = new StringTokenizer(str);

                String s = st.nextToken();
                int num = Integer.parseInt(st.nextToken());

                if (s.equals("I")) {
                    min_q.add(num);
                    max_q.add(num);
                } else if (s.equals("D")) {
                    if (min_q.isEmpty()) {
                        continue;
                    }
                    if (num == -1) { //최소값 삭제
                        int a = min_q.poll();
                        max_q.remove(a);
                    } else if (num == 1) { //최대값 삭제
                        int b = max_q.poll();
                        min_q.remove(b);
                    }
                }
            }
            if (max_q.isEmpty()) {
                System.out.println("EMPTY");
            } else {
                System.out.print(max_q.peek()+" "+min_q.peek());
            }
            max_q.clear();
            min_q.clear();
        }
    }

}

//시간 초과 발생 이유는 remove가 O(n)의 시간을 잡아 먹기 때문...


import java.util.*;
import java.io.*;

public class Coding_test {

    public static void main(String[] args) throws IOException{
//        Scanner sc=new Scanner(System.in);
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        TreeMap<Integer,Integer>map=new TreeMap<>();
        int t=Integer.parseInt(br.readLine());
        for(int i=0;i<t;i++) {

            int n = Integer.parseInt(br.readLine());
            for (int j = 0; j < n; j++) {
                String str = br.readLine();
                StringTokenizer st = new StringTokenizer(str);

                String s = st.nextToken();
                int num = Integer.parseInt(st.nextToken());

                if (s.equals("I")) {
                    if(!map.containsKey(num)){
                        map.put(num,1);
                    }else {
                        map.put(num, 1 + map.get(num));
                    }
                } else if (s.equals("D")) {
                    if (map.isEmpty()) {
                        continue;
                    }
                    if(num==1){
                        int max=map.lastKey();
                        if(map.get(max)-1==0){
                            map.remove(max);
                        }else{
                            map.put(max,map.get(max)-1);
                        }
                    }else if(num==-1){
                        int min=map.firstKey();
                        if(map.get(min)-1==0){
                            map.remove(min);
                        }else{
                            map.put(min,map.get(min)-1);
                        }
                    }

                }
            }
            if (map.isEmpty()) {
                System.out.println("EMPTY");
            } else {
                System.out.println(map.lastKey()+" "+map.firstKey());
            }
            map.clear();
        }
    }
}

//TreeMap
