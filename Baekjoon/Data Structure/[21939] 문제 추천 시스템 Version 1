import java.util.*;
import java.io.*;

public class Coding_test {

    public static void main(String[] args) throws IOException{
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        //Scanner sc=new Scanner(System.in);
        TreeMap<Integer,Integer>map=new TreeMap<>();
        HashMap<Integer,Integer>hashMap=new HashMap<>();

        int n=Integer.parseInt(br.readLine());
        for(int i=0;i<n;i++){
            String str=br.readLine();
            StringTokenizer st=new StringTokenizer(str);
            int a=Integer.parseInt(st.nextToken());
            int b=Integer.parseInt(st.nextToken());
            map.put(b,a);
            hashMap.put(a,b);
        }
        int m=Integer.parseInt(br.readLine());
        for(int j=0;j<m;j++){
            String tmp=br.readLine();
            StringTokenizer t=new StringTokenizer(tmp);
            String temp=t.nextToken();
            if(temp.equals("add")){
                int c=Integer.parseInt(t.nextToken());
                int d=Integer.parseInt(t.nextToken());
                map.put(d,c);
            }else{
                if(temp.equals("recommend")){
                    int x=Integer.parseInt(t.nextToken());
                    if(x==-1){
                        int first=map.firstKey();
                        System.out.println(map.get(first));
                        map.remove(first);
                    }else if(x==1){
                        int last=map.lastKey();
                        System.out.println(map.get(last));
                        map.remove(last);
                    }
                }else{
                    int y=Integer.parseInt(t.nextToken());
                    int key=hashMap.get(y);
                    map.remove(key);
                }
            }
        }
        br.close();
    }
}

//NosuchElement발생..자린이리 이유를 찾기 어렵다..
import java.util.*;

public class Main {

    public static class Problem implements Comparable<Problem> {
        int idx;
        int level;

        public Problem(int idx, int level) {
            this.idx = idx;
            this.level = level;
        }

        //난이도 순으로 정렬 -> 문제 번호로 정렬
        public int compareTo(Problem o) {

            if (level - o.level == 0) {
                return idx - o.idx;
            } else {
                return level - o.level;
            }
        }

        public String toString(){
            return "idx : "+idx+" level : "+level;
        }
    }

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        TreeSet<Problem> ts = new TreeSet<>();
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int nowidx = sc.nextInt();
            int nowlevel = sc.nextInt();
            ts.add(new Problem(nowidx, nowlevel));
            map.put(nowidx,nowlevel);
        }
//        System.out.println(ts.toString());
        int m = sc.nextInt();
        for (int i = 0; i < m; i++) {
            String command = sc.next(   );
            if (command.equals("add")) {
                int nowidx = sc.nextInt();
                int nowlevel = sc.nextInt();
                ts.add(new Problem(nowidx, nowlevel));
                map.put(nowidx,nowlevel);
            } else {
                if (command.equals("recommend")) {
                    if (sc.nextInt() == 1) {
                        System.out.println(ts.last().idx);
                    } else {
                        System.out.println(ts.first().idx);
                    }
                } else {
                    int nowidx = sc.nextInt();
                    ts.remove(new Problem(nowidx,map.get(nowidx)));
                    map.remove(nowidx);
                }
            }
        }
    }
}
